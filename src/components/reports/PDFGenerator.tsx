
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { useState } from "react";

interface PDFGeneratorProps {
  reportData: {
    totalFeedback: number;
    positivePercentage: number;
    negativePercentage: number;
    averageRating: number;
    categories: { category: string; score: number }[];
  };
  hotelName: string;
}

export default function PDFGenerator({ reportData, hotelName }: PDFGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    
    try {
      // Create PDF content as HTML string
      const pdfContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>Hotel Performance Report - ${hotelName}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
              .header { text-align: center; margin-bottom: 40px; border-bottom: 2px solid #ddd; padding-bottom: 20px; }
              .metric { margin: 20px 0; padding: 15px; background: #f9f9f9; border-radius: 8px; }
              .metric-label { font-weight: bold; color: #666; }
              .metric-value { font-size: 24px; font-weight: bold; color: #2563eb; }
              .categories { margin-top: 30px; }
              .category { display: flex; justify-content: space-between; padding: 10px; border-bottom: 1px solid #eee; }
              .footer { margin-top: 40px; text-align: center; color: #666; font-size: 12px; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Hotel Performance Report</h1>
              <h2>${hotelName}</h2>
              <p>Generated on ${new Date().toLocaleDateString()}</p>
            </div>
            
            <div class="metric">
              <div class="metric-label">Total Feedback Received</div>
              <div class="metric-value">${reportData.totalFeedback}</div>
            </div>
            
            <div class="metric">
              <div class="metric-label">Positive Sentiment</div>
              <div class="metric-value">${reportData.positivePercentage}%</div>
            </div>
            
            <div class="metric">
              <div class="metric-label">Negative Sentiment</div>
              <div class="metric-value">${reportData.negativePercentage}%</div>
            </div>
            
            <div class="metric">
              <div class="metric-label">Average Rating</div>
              <div class="metric-value">${reportData.averageRating}/5</div>
            </div>
            
            <div class="categories">
              <h3>Category Performance</h3>
              ${reportData.categories.map(cat => `
                <div class="category">
                  <span>${cat.category}</span>
                  <span><strong>${cat.score}/5</strong></span>
                </div>
              `).join('')}
            </div>
            
            <div class="footer">
              <p>Report generated by Serene Insights Analytics Platform</p>
            </div>
          </body>
        </html>
      `;

      // Create blob and download
      const blob = new Blob([pdfContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${hotelName.replace(/\s+/g, '_')}_Report_${new Date().toISOString().split('T')[0]}.html`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      console.log('PDF report generated successfully');
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button 
      onClick={generatePDF} 
      disabled={isGenerating}
      className="flex items-center gap-2"
    >
      <Download className="h-4 w-4" />
      {isGenerating ? 'Generating...' : 'Download Summary Report'}
    </Button>
  );
}
